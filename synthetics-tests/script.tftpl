var assert = require("assert");
var got = require("got");

// Generate a random Hex string of variable length
function randomHexString(len) {
    let hexString = "";
    for (let i = 0; i < len; i++) {
        hexString += (Math.floor(Math.random() * 16)).toString(16);
    }
    return hexString;
}

function generateValidId(len) {
    let id = randomHexString(len);
    // Ids must not be all zeros
    while (!(/[1-9a-f]/).test(id)) {
        id = randomHexString(len);
    }
    return id;
}

const traceId = generateValidId(32);
const spanId = generateValidId(16);
let traceparent = "00-" + traceId + "-" + spanId + "-01";
console.log(traceparent);

// Call Trace API
const region = "${REGION}";
let traceApiEndpoint;
if (region === "US") {
  traceApiEndpoint = "https://trace-api.newrelic.com/trace/v1";
} else {
  traceApiEndpoint = "https://trace-api.eu.newrelic.com/trace/v1";
}
const traceApiResponse = await got.post(traceApiEndpoint, )

const {data} = await got.post(traceApiEndpoint, {
	json: [
          {
            "spans": [
              {
                "trace.id": traceId,
                "id": spanId,
                "attributes": {
                  "duration.ms": 50,
                  "name": "synthetics-test"
                },
                "timestamp": Date.now()
              }
            ]
          }
        ]
}).json();

// Call Apigee
const options = {
  headers: {
    "traceparent": traceparent,
    "tracestate": ""
  }
};
const apigeeResponse = await got.get('${APIGEE_PROTOCOL}://${APIGEE_HOST}${ENDPOINT}', options)

let jsonBody = JSON.parse(apigeeResponse.body);
console.log('Response:', jsonBody);
assert.equal(apigeeResponse.statusCode, 200, 'Expected a 200 OK response');
assert.equal(jsonBody.name, 'Luke Skywalker', 'Expected name to equal Luke Skywalker');